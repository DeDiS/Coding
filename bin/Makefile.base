PKG_TEST = gopkg.in/dedis/Coding.test
gopath=$(shell go env GOPATH)
PKG_TEST_PATH = $(gopath)/src/$(PKG_TEST)
CODING = $(gopath)/src/github.com/dedis/Coding/bin
CREATE_STABLE = $(CODING)/create_stable.sh -o stable
EXCLUDE_LINT = "_test.go"

test_fmt:
	@echo Checking correct formatting of files
	@{ \
		files=$$( go fmt ./... ); \
		if [ -n "$$files" ]; then \
		echo "Files not properly formatted: $$files"; \
		exit 1; \
		fi; \
		if ! go vet ./...; then \
		exit 1; \
		fi \
	}

test_lint:
	@echo Checking linting of files
	@{ \
		go get -u github.com/golang/lint/golint; \
		el=$(EXCLUDE_LINT); \
		lintfiles=$$( golint ./... | egrep -v "$$el" ); \
		if [ -n "$$lintfiles" ]; then \
		echo "Lint errors:"; \
		echo "$$lintfiles"; \
		exit 1; \
		fi \
	}

test_verbose:
	go test -v -race -short -p=1 ./...

test_goveralls:
	go get github.com/mattn/goveralls
	$(CODING)/coveralls.sh
	$(gopath)/bin/goveralls -coverprofile=profile.cov -service=travis-ci || true

test_stable_build:
	$(CREATE_STABLE) $(PKG_TEST)
	cd $(PKG_TEST_PATH); go build ./...
	test -d $(PKG_TEST_PATH) && rm -rf $(PKG_TEST_PATH)

test_stable:
	$(CREATE_STABLE) $(PKG_TEST)
	cd $(PKG_TEST_PATH); make test
	test -d $(PKG_TEST_PATH) && rm -rf $(PKG_TEST_PATH)

test: test_fmt test_lint test_goveralls test_stable_build

create_stable:
	$(CREATE_STABLE) $(PKG_STABLE)
